services:

  key-cloak:
    hostname: localhost
    image: quay.io/keycloak/keycloak:26.1.3
    #user: root
    container_name: bacsystem-keycloak
    command:
      - start-dev
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      #- KC_DB=${KC_DB}
      #- KC_DB_URL_HOST=${KC_DB_URL_HOST}
      #- KC_DB_URL_PORT=${KC_DB_URL_PORT}
      #- KC_DB_URL_DATABASE=${KC_DB_URL_DATABASE}
      #- KC_DB_SCHEMA=${KC_DB_SCHEMA}
      #- KC_DB_USERNAME=${KC_DB_USERNAME}
      #- KC_DB_PASSWORD=${KC_DB_PASSWORD}
    ports:
      - "8090:8080"
    volumes:
      - ./tmp/keycloak:/opt/keycloak/data
    networks:
      - bacsystem
    restart: unless-stopped
    #depends_on:
    #  postgres:
    #    condition: service_healthy

  postgres:
    build:
      context: pg
      dockerfile: Dockerfile
      target: dev
    container_name: postgres-container
    hostname: postgres
    command: [ "postgres","-c", "wal_level=logical", "-c", "max_wal_senders=1" , "-c", "max_replication_slots=1" ]
    healthcheck:
      test: [ 'CMD','psql','-U','postgres','-c','SELECT 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
    user: root
    ports:
      - "5432:5432"
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./tmp/pg:/var/lib/postgresql/data
    networks:
      - bacsystem

  mongo-db:
    image: mongo:latest
    container_name: ${MONGO_NAME}
    restart: always
    ports:
      - ${MONGO_PORT_HOST}:${MONGO_PORT_CONTAINER}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - ${MONGO_VOLUME}
    networks:
      - ${MONGO_NETWORK}

  redis-db:
    image: redis:latest
    container_name: ${REDIS_NAME}
    ports:
      - ${REDIS_PORT_HOST}:${REDIS_PORT_CONTAINER}
    volumes:
      - ${REDIS_VOLUME}
    networks:
      - bacsystem

  server-ftp:
    build:
      context: ssh
      dockerfile: Dockerfile
    container_name: sftp-container
    #command: sleep infinity
    restart: always
    ports:
      - "2222:22"
    networks:
      - bacsystem

  jenkins:
    build:
      context: jenkins
      dockerfile: Dockerfile
    container_name: jenkins
    hostname: jenkins
    restart: always
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - ./tmp/jenkins:/var/jenkins_home  # persistence volume
    networks:
      - bacsystem

  agent-maven:
    build:
      context: jenkins/agents
      dockerfile: maven.Dockerfile
    container_name: agent-maven
    privileged: true
    user: root
    restart: always
    env_file:
      - jenkins.env
    ports:
      - "22:22"
    volumes:
      - ./tmp/jenkins/maven:/home/jenkins/agent
      - ./tmp/docker/run:/var/run/docker.sock
      - ./tmp/docker/bin:/var/run/docker.sock
    networks:
      - bacsystem

  agent-gradle:
    build:
      context: jenkins/agents
      dockerfile: gradle.Dockerfile
    container_name: gradle-agent
    privileged: true
    user: root
    restart: always
    env_file:
      - jenkins.env
    ports:
      - "2200:22"
    volumes:
      - ./tmp/jenkins/gradle:/home/jenkins/agent
      - ./tmp/docker/run:/var/run/docker.sock
      - ./tmp/docker/bin:/var/run/docker.sock
    networks:
      - bacsystem

networks:
  bacsystem:
    name: bacsystem-net
    driver: bridge